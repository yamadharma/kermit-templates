#!/bin/bash

## Based on pst-pdf script

# First, work around bugs/limitations in some shells on some systems:
test -f /bin/sh5 && test -z "$RUNNING_SH5" \
    && { UNAMES=`uname -s`; test "x$UNAMES" = xULTRIX; } 2>/dev/null \
    && { RUNNING_SH5=true; export RUNNING_SH5; exec /bin/sh5 $0 ${1+"$@"}; }
unset RUNNING_SH5

test -f /bin/bsh && test -z "$RUNNING_BSH" \
    && { UNAMES=`uname -s`; test "x$UNAMES" = xAIX; } 2>/dev/null \
    && { RUNNING_BSH=true; export RUNNING_BSH; exec /bin/bsh $0 ${1+"$@"}; }
unset RUNNING_BSH

# hack around a bug in zsh:
test -n "${ZSH_VERSION+set}" && alias -g '${1+"$@"}'='"$@"'

###############################################################################
# cleanup()
#   clean up the temp area and exit with proper exit status
###############################################################################
cleanup()
{
    rc=$?
    $needsCleanup && test -n "$tmpdir" && test -d "$tmpdir" \
	&& { rm -f "$tmpdir"/*; cd /; rmdir "$tmpdir"; }
    
  # set exit code in a portable way; see the autoconf manual for details:
    (exit $rc); exit $rc
}

###############################################################################
# setupTmpDir()
#   set up a temp directory and a trap to remove it
###############################################################################
setupTmpDir()
{
    $needsCleanup && return

    trap 'cleanup' 1 2 3 7 13 15
    needsCleanup=true
    (umask 077; mkdir "$tmpdir") \
	|| abort "could not create directory \`$tmpdir'"
}

###############################################################################
# myexec(args)
#   execute the command given as "args"; abort on error; redirect messages to
#   log in "silent" mode; redirect stdin (</dev/null) in silent mode
###############################################################################
myexec()
{
    if $silent; then
	echo "$0: running $@"
	"$@" >$log 2>&1 </dev/null
	rc=$?
    else
	"$@"
	rc=$?
    fi
    if test $rc != 0; then
	echo "$0: command $@ returned with code $rc"
	cat <$log
	(exit $rc) # set return value
	cleanup
    fi
}

# some initializations
progname=pdflatexps
silent=true # default setting; change if you like
crop=true
#crop=false
needsCleanup=false
ps2pdf_opts="-dAutoRotatePages=/None"
tmpdir=${TMPDIR-${TEMP-${TMP-/tmp}}}/.$progname$$
log=$tmpdir/log
version="1.0"

pdfcrop_opts="--xetex"

macro_format=latex
# ext_tmp: temporary extention
# dvi | pdf
ext_tmp=dvi

# look for optional things first
while
case $1 in
    --help|-h) echo "$0 [-v|-q|--crop|--version|--Xps2pdf OPT] FILE"
        echo "Process LaTeX document FILE using the pst-pdf package,"
        echo "including running latex, dvips, and ps2pdf as necessary."
        echo "--Xps2pdf OPT passes OPT to ps2pdf."
        echo " (-dAutoRotatePages=/None is always passed.)"
        echo "--crop runs pdfcrop on ps2pdf output."
  	exit 0;;
    --version) echo "$progname version $version"; exit 0;;
    --crop|-c) crop=true;;
    --no-crop) crop=false;;
    --Xps2pdf|-Xps2pdf) shift; ps2pdf_opts="$ps2pdf_opts $1";;
    -q) silent=true;;
    -v) silent=false;;
    -*) echo "$progname: unknown option $1 ignored";;
    *) break;;
esac
do
    shift
done

# remaining option: filename
file="$1"
dir=`dirname "$1"`

if test -z "$file"; then
    echo "$0: no file to process, try --help for more information." >&2
    exit 1
fi

# jobname von TeX: Verzeichnisse entfernen, evtl. vorhandene Extension
# entfernen.
job=`echo "x$1" | sed 's@x@@; s@.*/@@; s@\.[^.]*$@@'`

cur_dir=`pwd`

setupTmpDir

if [ -f "preamble-pst.tex" ]
then
    PREAMBLE_NAME=preamble-pst
else
    PREAMBLE_NAME=preamble
fi

FLAGS=-shell-escape

${macro_format} ${FLAGS} \
    "\input{$PREAMBLE_NAME} \begin{document} \thispagestyle{empty} \input{$file} \end{document}"


mv ${PREAMBLE_NAME}.${ext_tmp} "${dir}"/$job.${ext_tmp}
test -f ${PREAMBLE_NAME}.aux && rm ${PREAMBLE_NAME}.aux
test -f ${PREAMBLE_NAME}.log && rm ${PREAMBLE_NAME}.log

if [[ ${ext_tmp} == "dvi" ]]
then
    test -f "${dir}"/"$job.dvi" && myexec dvips -Ppdf -o "${dir}"/"$job.eps" "${dir}"/"$job.dvi"
    test -f "${dir}"/"$job.eps" && myexec ps2pdf "$ps2pdf_opts" "${dir}"/"$job.eps" "${dir}"/"$job.pdf"
fi

if $crop
then
    myexec pdfcrop "${pdfcrop_opts}" "${dir}"/"$job.pdf" "${dir}"/"$job-crop.pdf" 
    mv "${dir}"/"$job-crop.pdf" "${dir}"/"$job.pdf"
    pdftops "${dir}"/"$job.pdf" "${dir}"/"$job.eps"
fi    

for i in "${dir}"/*.dvi "${dir}"/*.log
do
    test -f $i && rm "$i"
done

# cleanup
echo "Converting done"


